import Workout from '../models/workout-model'

export class WorkoutService {
	static async getAllWorkouts() {
		try {
			return await Workout.find()
		} catch (err) {
			throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫')
		}
	}

	static async getWorkoutByUserId(userId: string) {
		try {
			const workout = await Workout.findOne({ userId })
			return workout || null
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ userId:', err)
			throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
		}
	}

	static async createWorkout(data: {
		userId: string
		exercises: { title: string; startMaxReps: number; finalGoal?: number }[]
	}) {
		try {
			let workout = await Workout.findOne({ userId: data.userId }) // üîß –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

			if (!workout) {
				workout = new Workout({
					userId: data.userId,
					exercises: data.exercises.map(ex => ({
						...ex,
						completedDays: [],
						finalGoal: ex.finalGoal ?? 100
					}))
				})
			} else {
				for (const ex of data.exercises) {
					const alreadyExists = workout.exercises.some(
						e => e.title === ex.title
					)
					if (!alreadyExists) {
						workout.exercises.push({
							...ex,
							completedDays: [],
							finalGoal: ex.finalGoal ?? 100
						})
					}
				}
			}

			return await workout.save()
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', err)
			throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
		}
	}

	static async deleteExerciseByUserId(userId: string, exerciseTitle: string) {
		try {
			const workout = await Workout.findOne({ userId })
			if (!workout) {
				throw new Error('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
			}

			const initialLength = workout.exercises.length

			workout.exercises = workout.exercises.filter(
				ex => ex.title !== exerciseTitle
			)

			if (workout.exercises.length === initialLength) {
				throw new Error('–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
			}

			await workout.save()
			return workout
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:', err)
			throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è')
		}
	}

	static async markDayCompleted(
		userId: string,
		exerciseTitle: string,
		dayIndex: number
	) {
		try {
			console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è:', {
				userId,
				exerciseTitle,
				dayIndex
			})

			const workout = await Workout.findOne({ userId })
			if (!workout) {
				console.error(`–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`)
				throw new Error('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
			}

			const exercise = workout.exercises.find(e => e.title === exerciseTitle)
			if (!exercise) {
				console.error(`–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ${exerciseTitle} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`)
				throw new Error('–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ')
			}

			if (!exercise.completedDays.includes(dayIndex)) {
				console.log(
					`–î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å ${dayIndex} –≤ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: ${exerciseTitle}`
				)
				exercise.completedDays.push(dayIndex)
				await workout.save()
				console.log('–î–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω:', dayIndex)
			} else {
				console.log(
					`–î–µ–Ω—å ${dayIndex} —É–∂–µ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: ${exerciseTitle}`
				)
			}

			return workout
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', err)
			if (err instanceof Error) {
				console.error('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:', err.message)
				console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', err.stack)
			}
			throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –¥–Ω—è')
		}
	}
	static async updateFinalGoal(
		userId: string,
		exerciseTitle: string,
		newGoal: number
	) {
		try {
			const workout = await Workout.findOne({ userId })
			if (!workout) throw new Error('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

			const exercise = workout.exercises.find(e => e.title === exerciseTitle)
			if (!exercise) throw new Error('–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

			exercise.finalGoal = newGoal
			await workout.save()
			return workout
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏:', err)
			throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏')
		}
	}
}
